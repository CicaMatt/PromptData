import pyotp
import base64

# Secret key - the same key provided in the Google Authenticator app
# Ensure the secret is Base32 encoded
secret = "YOURSECRETBASE32KEY"

# Initialize the TOTP generator
totp = pyotp.TOTP(secret)

# Generate current TOTP
current_otp = totp.now()
print(f"Current OTP: {current_otp}")

# Verify an OTP (enter the OTP generated by the Google Authenticator app)
user_otp = input("Enter OTP from Google Authenticator: ")
if totp.verify(user_otp):
    print("OTP is valid!")
else:
    print("Invalid OTP.")

# Secret key - the same key provided in the Google Authenticator app
secret = "YOURSECRETBASE32KEY"

# Initialize the HOTP generator (HOTP requires a counter value)
hotp = pyotp.HOTP(secret)

# Counter value (should increase each time a new OTP is generated)
counter = 1

# Generate an OTP for the given counter
otp = hotp.at(counter)
print(f"OTP for counter {counter}: {otp}")

# Verify the OTP (you need the correct counter)
user_otp = input("Enter OTP: ")
if hotp.verify(user_otp, counter):
    print("OTP is valid!")
else:
    print("Invalid OTP.")